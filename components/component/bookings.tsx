/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/oiqMVpHQLJe
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'
import { Arimo } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

arimo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo, useEffect } from "react"
import Link from "next/link"
import { Input } from "@/components/ui/input"
import { Carousel, CarouselContent, CarouselItem } from "@/components/ui/carousel"
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Card, CardContent } from "@/components/ui/card"
import { getRooms } from "@/services/api";

interface Venue {
  name: string;
  number: number;
}

export function Bookings() {
  const [searchTerm, setSearchTerm] = useState("")
  const [venues, setVenues] = useState<Venue[]>([]);
  const [selectedVenue, setSelectedVenue] = useState<string | null>(null);
  const [selectedDate, setSelectedDate] = useState(new Date())
  const [fromTime, setFromTime] = useState("10:00")
  const [toTime, setToTime] = useState("13:00")

  const clientId = process.env.CLIENT_ID;
  const redirectUri = process.env.REDIRECT_URI;

  const oauthLink = `https://gymkhana.iitb.ac.in/profiles/oauth/authorize/?client_id=${clientId}&response_type=code&scope=basic&redirect_uri=${redirectUri}&state=some_state`;

  useEffect(() => {
    const fetchVenues = async () => {
      try {
        const data = await getRooms(); 
        setVenues(data);
        console.log("Venues fetched:", venues);
      } catch (error) {
        console.error("Error fetching venues:", error);
      }
    };

    fetchVenues(); 
  }, []); 

  const filteredVenues = useMemo(() => {
    return venues.filter((venue) => venue.name.toLowerCase().includes(searchTerm.toLowerCase()))
  }, [searchTerm, venues])

  return (
    <div className="max-w-6xl mx-auto p-4 sm:p-6">
      <header className="flex items-center justify-between mb-6">
        <div className="text-2xl font-bold">SAC Booking Portal</div>
        <nav className="flex items-center gap-4">
          <Link href="#" className="font-medium hover:text-primary" prefetch={false}>
            Admin
          </Link>
          <Link href="#" className="font-medium hover:text-primary" prefetch={false}>
            Profile
          </Link>
          <Link href="#" className="font-medium hover:text-primary" prefetch={false}>
            Your Bookings
          </Link>
          <Link href={oauthLink} className="font-medium hover:text-primary" prefetch={false}>
            Login with SSO
          </Link>
        </nav>
      </header>
      <div className="mb-6">
        <Input
          placeholder="Search for venues..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="w-full rounded-lg bg-muted px-4 py-2"
        />
      </div>
      
      {selectedVenue ? ( 
        <div>
          <div className="grid gap-6 md:grid-cols-2">
            <div className="grid gap-4">
              <div>
                <h2 className="text-2xl font-bold">{selectedVenue}</h2> 
              </div>
              <div>
                <h3 className="text-lg font-semibold">Book Your Event</h3>
                <form className="grid gap-4">
                  <div className="grid grid-cols-2 gap-2">
                    <Popover>
                      <PopoverTrigger asChild>
                        <Button variant="outline" className="flex-col items-start w-full h-auto">
                          <span className="font-semibold uppercase text-[0.65rem]">Date</span>
                          <span className="font-normal">{selectedDate.toLocaleDateString()}</span>
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent className="p-0 max-w-[276px]">
                        <div className="grid grid-cols-2 gap-4">
                          <Button variant="outline" onClick={() => setSelectedDate(new Date(new Date().getTime()))}>
                            Today
                          </Button>
                          <Button
                            variant="outline"
                            onClick={() => setSelectedDate(new Date(new Date().getTime() + 86400000))}
                          >
                            Tomorrow
                          </Button>
                        </div>
                      </PopoverContent>
                    </Popover>
                    <div className="grid grid-cols-2 gap-2">
                      <div>
                        <Label htmlFor="from-time">From</Label>
                        <Input
                          id="from-time"
                          type="time"
                          value={fromTime}
                          onChange={(e) => setFromTime(e.target.value)}
                          min="10:00"
                          max="17:00"
                          step="3600"
                        />
                      </div>
                      <div>
                        <Label htmlFor="to-time">To</Label>
                        <Input
                          id="to-time"
                          type="time"
                          value={toTime}
                          onChange={(e) => setToTime(e.target.value)}
                          min="10:00"
                          max="17:00"
                          step="3600"
                        />
                      </div>
                    </div>
                  </div>
                  <Button size="lg" className="w-full">
                    Book
                  </Button>
                </form>
              </div>
            </div>
          </div>
          <Button
            variant="ghost"
            className="mt-6 flex items-center gap-2 text-muted-foreground hover:text-foreground"
            onClick={() => setSelectedVenue(null)}
          >
            <ArrowLeftIcon className="w-4 h-4" />
            Back to Venues
          </Button>
        </div>
      ) : (
        <div className="grid sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
          {filteredVenues.map((venue, index) => (
            <Card
              key={index} 
              className="group cursor-pointer"
              onClick={() => setSelectedVenue(venue.name)}
            >
              <CardContent className="grid gap-4">
                <div>
                  <h3 className="text-lg font-semibold">{venue.name}</h3> 
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}

function ArrowLeftIcon(props: any) {
  
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m12 19-7-7 7-7" />
      <path d="M19 12H5" />
    </svg>
  )
}
